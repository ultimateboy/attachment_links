<?php
// $Id$

/**
 * @file
 * Attachment Links provides a means of uploading multiple versions of a file
 * to a node and providing a permalink that links to the most recently uploaded
 * version and a permalink that links to the author's preferred version. This
 * functionality handles situations where an author may attach a working draft
 * of a new employee handbook, but link to a previously uploaded file as the
 * preferred version.
 *
 * The preferred version is the version that has the lightest relative weight
 * among the node's attached files.
 *
 * The module's output is fully themeable, allowing site implementors to
 * eliminate the link to the most recent version, for example.
 */

// -- --------------------------------------------------------------------------
// -- Core Drupal hooks.
// -- --------------------------------------------------------------------------

/**
 * Implementation of hook_enable(). Make this module heavy to encourage Drupal
 * to run its hooks after the Upload module's hooks.
 *
 * @return None.
 */
function attachment_links_enable() {
	$query = "UPDATE {system} SET `weight` = 99 WHERE `name` = 'attachment_links'";

	db_query($query);
}


/**
 * Implementation of hook_form_alter().
 *
 * @param $form The form array to alter.
 * @param $form_state The current form state.
 * @param $form_id The ID of the form being processed.
 *
 * @return None.
 */
function attachment_links_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
  	$desc = t('Attachments must be enabled in order for attachment links to appear.');
    $form['workflow']['attachment_links'] = array(
      '#type'          => 'radios',
      '#title'         => t('Attachment links'),
      '#description'   => $desc,
      '#default_value' => variable_get('attachment_links_'. $form['#node_type']->type, 0),
      '#options'       => array(t('Disabled'), t('Enabled')),
      '#weight'        => 5,
    );
  }

  if (isset($form['type']) && isset($form['#node']) && isset($form['attachments'])) {
  	// -- TODO This will need to change later when the module is expanded to
  	// -- offer greater list options.
  	$links = theme('attachment_links', $form['#node']);

    $form['attachments']['#description'] .= $links;
  }
}


/**
 * Implementation of hook_menu().
 *
 * @return Array of menu items.
 */
function attachment_links_menu() {
	$items = array();

	$items['node/%node/attachment'] = array(
	  'title' => 'Authoritative Attachment',
	  'description' => 'The canonical or "lightest" attached file.',
  	'type'             => MENU_CALLBACK,
	  'page callback'    => 'attachment_links_authoritative',
    'page arguments'   => array(1),
	  'access callback'  => 'user_access',
    'access arguments' => array('view uploaded files'),
	);

	$items['node/%node/attachment/newest'] = array(
	  'title' => 'Latest Attachment',
	  'description' => 'The most recently attached file.',
	  'type'             => MENU_CALLBACK,
	  'page callback'    => 'attachment_links_newest',
    'page arguments'   => array(1),
    'access callback'  => 'user_access',
    'access arguments' => array('view uploaded files'),
  );

	return $items;
}


/**
 * Implementation of hook_nodeapi().
 *
 * @param $node The node being operated on.
 * @param $op The operation being performed. This implementation responds to:
 *        "view"
 * @param $a3 For "view", passes in the $teaser parameter from node_view().
 * @param $a4 Ignored.
 *
 * @return None.
 */
function attachment_links_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
	if ((variable_get("attachment_links_{$node->type}", 0) == 0) || empty($node->files)) {
		return;
	}

  if (($op == 'view') && ($a3 == FALSE) && user_access('view uploaded files')) {
    _taguser_content_form($node, $a3, $a4);
    $node->content['attachment_links'] = array(
      '#value'  => theme('attachment_links', $node),
      '#weight' => 3,
    );
  }
}


/**
 * Implementation of hook_theme().
 *
 * @param $existing $existing An array of existing implementations that may be
 *        used for override purposes.
 * @param $type $type What 'type' is being processed.
 * @param $theme The actual name of theme that is being being checked.
 * @param $path The directory path of the theme or module.
 *
 * @return A keyed array of theme hooks.
 */
function attachment_links_theme($existing, $type, $theme, $path) {
	$hooks = array();

  $hooks['attachment_links'] = array(
    'template'  => 'attachment-links',
    'arguments' => array('node' => NULL),
  );

  return $hooks;
}


// -- --------------------------------------------------------------------------
// -- Module functions.
// -- --------------------------------------------------------------------------

/**
 * Fetch the authoritative file for the given node.
 *
 * @param $node The node the file is attached to.
 *
 * @return Nothing if the download was successful, or a 404 error page if the
 *         file could not be found.
 */
function attachment_links_authoritative($node) {
	$query = "SELECT `filepath` FROM {files} f
	                 INNER JOIN {upload} u ON f.`fid` = u.`fid`
	          WHERE u.`vid` = %d
	          ORDER BY u.`weight` ASC";
	$path  = db_result(db_query($query, array($node->vid)));

	_attachment_links_download($path);
}


/**
 * Fetch the authoritative file for the given node.
 *
 * @param $node The node the file is attached to.
 *
 * @return Nothing if the download was successful, or a 404 error page if the
 *         file could not be found.
 */
function attachment_links_newest($node) {
  $query = "SELECT `filepath` FROM {files} f
                   INNER JOIN {upload} u ON f.`fid` = u.`fid`
            WHERE u.`vid` = %d
            ORDER BY f.`timestamp` DESC";
  $path  = db_result(db_query($query, array($node->vid)));

  _attachment_links_download($path);
}


/**
 * Download the given file over HTTP.
 *
 * @param $filepath The local path to the file.
 *
 * @return None if the call was successful. Returns a themed 404 error page if
 *         the file could not be found.
 */
function _attachment_links_download($filepath) {
	// -- Copied from file_download().
	if (file_exists(file_create_path($filepath))) {
    $headers = module_invoke_all('file_download', $filepath);

    if (in_array(-1, $headers)) {
      return drupal_access_denied();
    }

    if (count($headers)) {
    	$headers[] = 'Content-Type: application/force-download';
    	$headers[] = 'Content-Disposition: attachment; filename=' . basename($filepath);

      file_transfer($filepath, $headers);
    }
  }

  return drupal_not_found();
}


// -- --------------------------------------------------------------------------
// -- Module theming functions.
// -- --------------------------------------------------------------------------

/**
 * Preprocess the output for attachment links.
 *
 * @param $vars The theme variables array. After this function is called, these
 *        keys will be available in the array:
 *        - attachment_links: An array of keyed attachment link arrays. Each
 *          array in this array has the following keys:
 *              - 'url' - The URL for that item's attachment.
 *              - 'weight' - The relative weight for that attachment within
 *                 attachment_links.
 *              - 'default render' - A default rendering of the singular item.
 *        - default_render: A default unordered list rendering for the
 *          attachment links as generated by theme('item_list',...).
 *
 * @return unknown_type
 */
function template_preprocess_attachment_links(&$vars) {
  $node = $vars['node'];

  // -- This section clunky at first, but this design is to accomodate future
  // -- plans for the module.
  $items   = array();
  $options = array('absolute' => TRUE);

  $auth_path = 'node/' . $node->nid . '/attachment';
  $items['authoritative'] = array(
    'url'            => $auth_url,
    'weight'         => -5,
    'default render' => t('Preferred version: !link',
                          array('!link' => l(url($auth_path, $options), $auth_path))),
  );

  $newest_path = 'node/' . $node->nid . '/attachment/newest';
  $items['newest'] = array(
    'url'            => $newest_url,
    'weight'         => 0,
    'default render' => t('Newest version: !link',
                          array('!link' => l(url($newest_path, $options), $newest_path))),
  );

  $vars['attachment_links'] = $items;

  // -- Create a default link list rendering.
  $list  = array();
  foreach ($items as $key => $value) {
  	$list[] = $value['default render'];
  }

  $attributes = array(
    'id'    => 'attachment-link-list',
    'class' => 'attachment-link-list',
  );

  $vars['default_render'] = theme('item_list', $list, t('Attachment links:'), 'ul', $attributes);
}

