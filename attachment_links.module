<?php

/**
 * @file
 * The Attachment Links module provides permanent links to files attached to a
 * node. A single, easy-to-remember URL can be used to retrieve the preferred
 * (canonical) or newest version of a file regardless of how many versions of
 * that file have been attached to a node.
 */

/**
 * Implements hook_menu().
 */
function attachment_links_menu() {
  $items['node/%node/attachment'] = array(
    'title' => 'Authoritative Attachment',
    'description' => 'The canonical or "lightest" attached file.',
    'type' => MENU_CALLBACK,
    'page callback' => 'attachment_links_retrieve',
    'page arguments' => array(1, 'authoritative'),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
  );

  $items['node/%node/attachment/newest'] = array(
    'title' => 'Latest Attachment',
    'description' => 'The most recently attached file.',
    'type' => MENU_CALLBACK,
    'page callback' => 'attachment_links_retrieve',
    'page arguments' => array(1, 'newest'),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
  );

  return $items;
}

/**
 * Implements hook_node_view().
 */
function attachment_links_node_view($node, $view_mode, $langcode) {
  // Add the links to the node display, for easy access.
  if (variable_get('attachment_links_selection_' . $node->type, 0)) {
    $node->content['attachment_links'] = array(
      '#markup' => theme('attachment_links', array('node' => $node)),
      '#weight' => 3,
    );
  }
}

/**
 * Implements hook_theme().
 */
function attachment_links_theme($existing, $type, $theme, $path) {
  $hooks['attachment_links'] = array(
    'template' => 'attachment-links',
    'variables' => array(
      'node' => NULL,
    ),
  );
  return $hooks;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function attachment_links_form_node_type_form_alter(&$form, &$form_state) {
  // Add a section to the node type edit form that allows the user to select
  // which file field will be used by Attachment links, as there may be multiple.
  if (isset($form['type'])) {
    $node_type = $form['#node_type']->type;
    if (isset($node_type)) {
      // Get all file fields on this node type for select options:
      $options = array(0 => 'Disabled');
      $instances = field_info_instances('node', $node_type);
      foreach ($instances as $field_name => $instance) {
        $field_info = field_info_field($field_name);
        if ($field_info['type'] == 'file') {
          $options[$field_info['id']] = $field_name;
        }
      }

      $form['attachment_links'] = array(
        '#type' => 'fieldset',
        '#title' => t('Attachment links'),
        '#group' => 'additional_settings',
      );

      $form['attachment_links']['attachment_links_selection'] = array(
        '#type' => 'select',
        '#title' => t('Select file field'),
        '#description' => t('When hitting attachment links URLs, it will deliver files from this file field.'),
        '#default_value' => variable_get('attachment_links_selection_' . $node_type, 0),
        '#options' => $options,
        '#weight' => 5,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function attachment_links_form_node_form_alter(&$form, &$form_state) {
  // Provide some help and info on the node edit form.
  if (isset($form['type']) && isset($form['#node'])) {
    $file_field_id = variable_get('attachment_links_selection_' . $form['#node']->type, 0);
    if ($file_field_id) {
      $file_field = field_info_field_by_id($file_field_id);

      $form['attachment_links'] = array(
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#title' => t('Attachment links'),
        '#group' => 'additional_settings',
        '#weight' => 50,
      );
      $help_blurb = t('Attachment links provides permanent links for files in the field %field. The "preferred" version is the first file listed on the field %field above. Click and drag the handles to the left of each file to reorder them. You can choose a different field in the content type settings.', array('%field' => $file_field['field_name']));

      // Display different help text for node creation and node editing forms.
      if ($form['nid']['#value']) {
        $help_blurb .= theme('attachment_links', array('node' => $form['#node']));
      }
      else {
        $help_blurb .= '<div><strong>' . t('Attachment links will be shown here after you save the node.') . '</strong></div>';
      }

      $form['attachment_links']['current'] = array(
        '#type' => 'item',
        '#title' => t('Attachment links on %field', array('%field' => $file_field['field_name'])),
        '#markup' => $help_blurb,
      );
    }
  }
}

/**
 * Menu callback to fetch the reqested file for the given node.
 */
function attachment_links_retrieve($node, $type) {
  // Make sure that attachment links are enabled for a field on this node type.
  $file_field_id = variable_get('attachment_links_selection_' . $node->type, 0);
  if (!$file_field_id) {
    return MENU_NOT_FOUND;
  }
  
  // Grab the files from the current node for the selected field.
  $file_field = field_info_field_by_id($file_field_id);
  $files = field_get_items('node', $node, $file_field['field_name']);
  
  // If we have files, continue, else return 404.
  if (!empty($files)) {
    switch ($type) {
      case 'authoritative':
        // Return the first element of the array, which is the 'highest' one.
        $file = reset($files);
        $uri = $file['uri'];
      break;

      case 'newest':
        // Get the newest item by timestamp. In the case of multiple timestamps
        // being equal, the 'highest' one will be selected. The handy part is
        // that the array returned by field_get_items is already in weight order,
        // with key 0 being the lightest.
        $max_timestamp = 0;
        foreach ($files as $key => $file) {
          if ($file['timestamp'] > $max_timestamp) {
            $max_timestamp = $file['timestamp'];
            $max_key = $key;
          }
        }
        $uri = $files[$max_key]['uri'];
      break;
    }

    // Function file_create_url will generate either the public direct path
    // to the file, or in the case of private, will generate /system/files/{file}.
    drupal_goto(file_create_url($uri));
  }
  else {
    return MENU_NOT_FOUND;
  }
}

/**
 * Process variables for attachment-links.tpl.php.
 */
function template_preprocess_attachment_links(&$vars) {
  $node = $vars['node'];
  $options = array('absolute' => TRUE);
  $vars['items'] = array(
    t('Preferred version: !link', array('!link' => l(url("node/$node->nid/attachment", $options), "node/$node->nid/attachment"))),
    t('Newest version: !link', array('!link' => l(url("node/$node->nid/attachment/newest", $options), "node/$node->nid/attachment/newest"))),
  );
}
